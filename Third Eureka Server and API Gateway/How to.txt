make sure "UserServicePro" is running inside
	"e:\MySTS"    workspace

"ContactServicePro" is running inside 
	"e:\STS_MicroService"   workspace

There we saw how "UserService" contacts with "ContactService" using "RestTemplate".

The drawback of above communication is we've to hard code the address of "ContactService" inside "UserService"

template.getForObject("http://localhost:9003/contact/"+user.getId(), List.class);


so in this example we'll make it dynamic i.e. UserService will just mention the name of "ContactService" irrespective of on which server it is running and what port no. it is using. This can be achieved using "Eureka Server". We are going to create Eureka server where services will be registered.



 

start STS in workspace other than "UserService" and "ContactService" workspaces.  
	"e:\Eureka"  

File
	new Spring starter project
		"EurekaPro"

	maven
	jar
	java
	java version 17

next


spring boot version    "3.0.8 snapshot"
	[ the option "Eureka Server" is not availble with 3.1.0 version that's why we need to choose "3.0.8 snapshot" version of spring boot]


dependencies to be added
	Spring cloud discovery
		Eureka server



spring boot application class


package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

@SpringBootApplication
@EnableEurekaServer
public class EurekaProApplication {

	public static void main(String[] args) {
		SpringApplication.run(EserverProApplication.class, args);
	}

}


application.properties

server.port=8761
# this eureka server should not register with itself
eureka.client.register-with-eureka=false   
eureka.client.fetch-registry=false
eureka.server.wait-time-in-ms-when-sync-empty=0


meaning of "eureka.client.register-with-eureka=false"
	Eureka Server itself is a microservice, but it is not supposed to register itself that's why we need to give this inside "application.properties" file.

meaning of "eureka.client.fetch-registry=false"
	Only clients need to fetch registry to get the registered microservices for communication EurekaServer need not fetch other registered Microservices.

meaning of "eureka.server.wait-time-in-ms-when-sync-empty=0"
	when the eureka server is started, you cannot wait for the instance registration information from the peer node.


right click on 

	EserverProApplication
		run as 
			java application

make sure it starts Eureka server

just to check whether Eureka server has started or not properly
	go to browser and type

http://localhost:8761/
	make sure u get "Eureka Server's home page"

on this page, inside "Application" you will see:
	No instances available

it's because we've made Eureka Server but havn't yet made Eureka Client.



now we have to make Eureka client

our Eureka clients are "UserService" and "ContactService"

in order to make "ContactService" as Eureka client , we have to add dependency.


inside "UserServicePro" project

open "pom.xml"

inside "properties" tag , add following line

	<spring-cloud.version>2022.0.2</spring-cloud.version>

two dependencies need to be added:

<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
    </dependency>

and

after </dependencies>  tag:

<dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>${spring-cloud.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>



now restart "UserServicePro"

notice the console window for this message:

	DiscoveryClient_UNKNOWN/LAPTOP-DM7E4AA9:9003: registering service...



go to "EurekaPro" project and notice the console window. You'll get following message:

Registered instance UNKNOWN/LAPTOP-DM7E4AA9:9002 with status UP (replication=true)

	it means that the service which is running on port no. 9002
has been registered as Eureka client with Eureka server [ i.e. with EurekaPro ]


go to the browser and type

http://localhost:8761/

under "Application" you will notice

UNKNOWN	n/a (1)	(1)	UP (1) - LAPTOP-DM7E4AA9:9002


now let's make "ContactServicePro" as a Eureka client with the same procedure we followed while making "UserServicePro" as a Eureka client.


inside "ContactServicePro" project

open "pom.xml"

inside "properties" tag , add following line

	<spring-cloud.version>2022.0.2</spring-cloud.version>

two dependencies need to be added:

<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
    </dependency>

and

after </dependencies>  tag:

<dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>${spring-cloud.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>



now restart "ContactServicePro"

notice the console window for this message:

	DiscoveryClient_UNKNOWN/LAPTOP-DM7E4AA9:9003: registering service...

go to "EurekaPro" project and notice the console window. You'll get following message:

Registered instance UNKNOWN/LAPTOP-DM7E4AA9:9003 with status UP (replication=true)

	it means that the service which is running on port no. 9003
has been registered as Eureka client with Eureka server [ i.e. with EurekaPro ]


go to the browser and type

http://localhost:8761/

under "Application" you will notice

UNKNOWN	n/a (2)	(2)	UP (2) - LAPTOP-DM7E4AA9:9003 , LAPTOP-DM7E4AA9:9002


it means both "UserServicePro" and "ContactServicePro" have been registered with Eureka Server [ i.e. EurekaPro ]

it shows "UNKNOWN" because server doesn't know the name of the application.

actually when you put dependencies "spring-cloud-starter-netflix-eureka-client" and "spring-cloud-dependencies" inside "UserServicePro" and "ContactServicePro", spring boot first checks whether Eureka server is running on port no. 8761 and if yes, automatically registers both these services with the server.


now let's replace "UNKNOWN" with the actual service name


go to "UserServicePro"
	go to "application.yml" file



server:
  port: 9002

spring:
  application:
    name: UserService


restart the server


go to "ContactServicePro"
	go to "application.yml" file



server:
  port: 9003

spring:
  application:
    name: ContactService


restart the server


go to "EurekaPro" project's console window and you'll see these messages:

Registered instance USERSERVICE/LAPTOP-DM7E4AA9:UserService:9002 with status UP (replication=true)

Registered instance CONTACTSERVICE/LAPTOP-DM7E4AA9:ContactService:9003 with status UP (replication=true)

	notice that now it's not UNKNOWN.

go to the brower and refresh the page   "http://localhost:8761/"

under "Application" , you'll notice


CONTACTSERVICE	n/a (1)	(1)	UP (1) - LAPTOP-DM7E4AA9:ContactService:9003

USERSERVICE	n/a (1)	(1)	UP (1) - LAPTOP-DM7E4AA9:UserService:9002
	

now let's go to "UserServicePro" and replace "template.getForObject("http://localhost:9003/contact/") with the actual name of "ContactServicePro" which has been registered with "Eureka Server"


open "UserController.java"

	and replace "localhost:9003"  with "CONTACTSERVICE". This is name which we can see on "http://localhost:8761/" page.

save and restart the server.

now go to POSTMAN

type

http://localhost:9002/user/101

		GET

it will not give you output. If you check console window of UserServicePro, you will get following error:


java.net.UnknownHostException: CONTACTSERVICE


go to "UserServiceProApplication.java" where we have written


	@Bean
	public RestTemplate getRestTemplate()
	{
		return new RestTemplate();
	}

just add one more annotation to the above "getRestTemplate()" method

@LoadBalanced

so the code should look like :

	@Bean
	@LoadBalanced
	public RestTemplate getRestTemplate()
	{
		return new RestTemplate();
	}


restart the server ( of UserServicePro )

make sure there is no error


now go to POSTMAN again

type

http://localhost:9002/user/101

		GET

make sure you get a proper output.



So what we have seen so far is "UserServicePro" need not use hostname and port no. to talk to "ContactServicePro", it can use the name of "ContactServicePro" i.e. "CONTACTSERVICE" which is registered on "Eureka Server".

Eureka Server is for discovery where microservices are registered ("UserServicePro" and "ContactServicePro" in our case) and then in any microservice ( "UserServicePro" in our case) using Eureka client we can access any microservice ("ContactServicePro") which is available on the server.

which service is UP and which is DOWN we come to know on :

		http://localhost:8761/


now let's go and implement "API Gateway"

uptill now we have used "Eureka Service Discovery" i.e. if we want to contact "UserService", we have to contact "UserServicePro" and in order to contact "ContactService", we've to contact "ContactService".

now we would like to create "API Gateway" through which we'll be able to access "UserServicePro" and "ContactServicePro".

API Gateway is also a kind of MicroService hence we need to create a separate project for it.

create a folder
e:\API_Gateway  for a new workspace

start STS on this workspace.

new spring starter project
	ApiGatewayPro

java
java 17 
maven

next

spring boot version
	3.0.8 snapshot

	choose following dependencies

		spring cloud routing
			Gateway
		actuator
		Spring Boot Devtools
		Eureka Discovery Client

[ we have selected "Eureka Discovery Client" because API Gateway is a kind of Eureka Client]

	next
		finish

make sure project gets created.

go to "ApiGatewayProApplication.java" and add one more annotation
"@EnableDiscoveryClient" as this application is also a kind of Eureka Client.

create "application.yml" file inside
src/main/resources


inside "application.yml" file

server:
  port: 8999
eureka:
  instance:
    hostname: localhost


run the application and make sure it works properly and registers the service.
	you'll see this message on the console:

DiscoveryClient_UNKNOWN/LAPTOP-DM7E4AA9:8999 - registration status: 204


make sure your "EurekaPro" project is running

go to "http://localhost:8761/"
	refresh the page 
there you'll see


CONTACTSERVICE	n/a (1)	(1)	UP (1) - LAPTOP-DM7E4AA9:ContactService:9003

UNKNOWN	n/a (1)	(1)	UP (1) - LAPTOP-DM7E4AA9:8999

USERSERVICE	n/a (1)	(1)	UP (1) - LAPTOP-DM7E4AA9:UserService:9002

let's give name to our API Gateway which is shown as "UNKNOWN" right now.

go to "application.yml" of "ApiGatewayPro" and add the following entry:

spring:
  application:
    name: API-Gateway

save and restart the application.

on the console check the message:
	DiscoveryClient_API-GATEWAY/LAPTOP-DM7E4AA9:API-Gateway:8999 - registration status: 204


go to "http://localhost:8761/"
	refresh the page

now you'll see

API-GATEWAY	n/a (1)	(1)	UP (1) - LAPTOP-DM7E4AA9:API-Gateway:8999

CONTACTSERVICE	n/a (1)	(1)	UP (1) - LAPTOP-DM7E4AA9:ContactService:9003

UNKNOWN	n/a (1)	(1)	UP (1) - LAPTOP-DM7E4AA9:8999

USERSERVICE	n/a (1)	(1)	UP (1) - LAPTOP-DM7E4AA9:UserService:9002


if you see "UNKNOWN" also along with "API-GATEWAY", 
	restart "EurekaPro"

go to "http://localhost:8761/"
	refresh the page

make sure you'll see


API-GATEWAY	n/a (1)	(1)	UP (1) - LAPTOP-DM7E4AA9:API-Gateway:8999

CONTACTSERVICE	n/a (1)	(1)	UP (1) - LAPTOP-DM7E4AA9:ContactService:9003

USERSERVICE	n/a (1)	(1)	UP (1) - LAPTOP-DM7E4AA9:UserService:9002


now what we want is using "API-GATEWAY", we should be able to access "UserServicePro" or "ContactServicePro" or any Microservice which has been registered with Eureka Server.


For this purpose we need to do some configurations in "ApiGatewayPro"

go to "application.yml" of "ApiGatewayPro"

your "application.yml" of "ApiGatewayPro" should have following contents:


server:
  port: 8999
eureka:
  instance:
    hostname: localhost
    
spring:
  application:
    name: API-Gateway
  cloud:
    gateway:
      routes:
        - id: user_id
          uri: lb://UserService
          predicates:
          - Path=/user/**
        - id: contact_id
          uri: lb://ContactService
          predicates:
          - Path=/contact/**


save the file

start the application ( of "ApiGatewayPro")
and make sure it works properly.


let's try to use "API-GATEWAY"

go to browser and type

http://localhost:8999/user/101

make sure you get the following output:

{"id":101,"name":"Xyz","phone":"9870685689","contacts":[{"cid":1,"email":"Sachin","contactName":"Sachin@gmail.com","id":101},{"cid":2,"email":"Rahul","contactName":"Rahul@gmail.com","id":101}]}


now type:
	http://localhost:8999/contact/101

[{"cid":1,"email":"Sachin","contactName":"Sachin@gmail.com","id":101},{"cid":2,"email":"Rahul","contactName":"Rahul@gmail.com","id":101}]


The above outputs shows that how we can access a specific MicroService ("UserServicePro" or "ContactServicePro") with the help of API Gateway which is running on "http://localhost:8999"





